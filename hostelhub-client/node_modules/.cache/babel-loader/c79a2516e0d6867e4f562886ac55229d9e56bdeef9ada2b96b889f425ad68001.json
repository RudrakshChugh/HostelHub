{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rudra\\\\hostelhub-client\\\\src\\\\context\\\\AuthProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const storedUser = JSON.parse(localStorage.getItem('hostelhub-user'));\n    if (storedUser) setUser(storedUser);\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setLoading(true);\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n      const data = await res.json();\n      setUser(data);\n      localStorage.setItem('hostelhub-user', JSON.stringify(data));\n      localStorage.setItem('token', data.token);\n    } catch (err) {\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('hostelhub-user');\n    localStorage.removeItem('token');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","storedUser","JSON","parse","localStorage","getItem","login","email","password","res","fetch","method","headers","body","stringify","ok","errorData","json","Error","message","data","setItem","token","err","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rudra/hostelhub-client/src/context/AuthProvider.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport default function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const storedUser = JSON.parse(localStorage.getItem('hostelhub-user'));\r\n    if (storedUser) setUser(storedUser);\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch('http://localhost:5000/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const errorData = await res.json();\r\n        throw new Error(errorData.message || 'Login failed');\r\n      }\r\n\r\n      const data = await res.json();\r\n\r\n      setUser(data);\r\n      localStorage.setItem('hostelhub-user', JSON.stringify(data));\r\n      localStorage.setItem('token', data.token);\r\n    } catch (err) {\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('hostelhub-user');\r\n    localStorage.removeItem('token');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAC1C,OAAO,MAAMO,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,eAAe,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACjD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACrE,IAAIJ,UAAU,EAAEH,OAAO,CAACG,UAAU,CAAC;IACnCD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvCR,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMS,GAAG,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEX,IAAI,CAACY,SAAS,CAAC;UAAEP,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAI,CAACC,GAAG,CAACM,EAAE,EAAE;QACX,MAAMC,SAAS,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;QAClC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,cAAc,CAAC;MACtD;MAEA,MAAMC,IAAI,GAAG,MAAMX,GAAG,CAACQ,IAAI,CAAC,CAAC;MAE7BnB,OAAO,CAACsB,IAAI,CAAC;MACbhB,YAAY,CAACiB,OAAO,CAAC,gBAAgB,EAAEnB,IAAI,CAACY,SAAS,CAACM,IAAI,CAAC,CAAC;MAC5DhB,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAED,IAAI,CAACE,KAAK,CAAC;IAC3C,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,MAAMA,GAAG;IACX,CAAC,SAAS;MACRvB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMwB,MAAM,GAAGA,CAAA,KAAM;IACnB1B,OAAO,CAAC,IAAI,CAAC;IACbM,YAAY,CAACqB,UAAU,CAAC,gBAAgB,CAAC;IACzCrB,YAAY,CAACqB,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED,oBACEnC,OAAA,CAACC,WAAW,CAACmC,QAAQ;IAACC,KAAK,EAAE;MAAE9B,IAAI;MAAEE,OAAO;MAAEO,KAAK;MAAEkB;IAAO,CAAE;IAAA7B,QAAA,EAC3DA;EAAQ;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACnC,GAAA,CAjDuBF,YAAY;AAAAsC,EAAA,GAAZtC,YAAY;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}